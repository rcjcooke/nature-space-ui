const gulp = require("gulp");
const webpack = require('webpack');
const webpackConfig = require('./webpack.config.js');
const browserSync = require('browser-sync').create();

// Configuration
var configuration = {
  paths: {
    src: {
      html: './app/*.html',
      css: [
        './app/css/main.css'
      ],
      js: './app/js/**/*.js'
    },
    dist: './dist'
  }
};

// Javascript build
function assets(cb) {
  return new Promise((resolve, reject) => {
    webpack(webpackConfig, (err, stats) => {
      if (err) {
        return reject(err);
      }
      if (stats.hasErrors()) {
        return reject(new Error(stats.compilation.errors.join('\n')));
      }
      resolve()
    });
  });
}

// Static Site Generation
function ssg(cb) {
  gulp.src(configuration.paths.src.html).pipe(gulp.dest(configuration.paths.dist));
  gulp.src(configuration.paths.src.css).pipe(gulp.dest(configuration.paths.dist));
  cb();
}

function serve(cb) {
  browserSync.init({
    server: configuration.paths.dist,
    port: 8080,
    host: "0.0.0.0"
  }, cb);
}

function reload(cb) {
  browserSync.reload();
  cb();
}

function watch (cb) {
  return gulp.watch(
    '**/*', // watch everything...
    {
      ignored: [
        // ...except for things generated by the build process.
        configuration.paths.dist + '/**/*'
      ]
    },
    // when something changes, rebuild + reload
    gulp.series(assets, ssg, reload)
  )
}

// Export build tasks
exports.build = gulp.series(assets, ssg);
exports.develop = gulp.series(assets, ssg, serve, watch);
